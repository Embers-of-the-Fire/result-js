import{_ as s,o as a,c as e,S as t}from"./chunks/framework.f13a96d5.js";const D=JSON.parse('{"title":"Result.js","description":"","frontmatter":{},"headers":[],"relativePath":"dist/README.md","filePath":"dist/README.md"}'),l={name:"dist/README.md"},n=t('<p>@embers-of-the-fire/resultjs / <a href="./modules.html">Exports</a></p><h1 id="result-js" tabindex="-1">Result.js <a class="header-anchor" href="#result-js" aria-label="Permalink to &quot;Result.js&quot;">​</a></h1><p>A TypeScript/Javascript Exception Handling Library.</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><h3 id="what-is-result-js" tabindex="-1">What is Result.js <a class="header-anchor" href="#what-is-result-js" aria-label="Permalink to &quot;What is Result.js&quot;">​</a></h3><p>Result.ts is a exception handling library for TypeScript/Javascript, aiming for elegant result wrapping, parsing and handling, inspired by <a href="https://www.rust-lang.org" target="_blank" rel="noreferrer">Rust</a>&#39;s <a href="https://doc.rust-lang.org/std/result/enum.Result.html" target="_blank" rel="noreferrer"><code>std::result::Result</code></a> enumeration.</p><h3 id="how-to-install" tabindex="-1">How to install <a class="header-anchor" href="#how-to-install" aria-label="Permalink to &quot;How to install&quot;">​</a></h3><p>First, make sure that you&#39;ve already installed <a href="https://nodejs.org/" target="_blank" rel="noreferrer">nodejs</a>.</p><p>Then, in your terminal, run the following command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@embers-of-the-fire/resultjs</span></span></code></pre></div><h3 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h3><p>After installing the library, you could use it in your project.</p><p>First, import the core structure:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@embers-of-the-fire/resultjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Then, turn your current union object into <code>Result</code> object. A <code>Result&lt;T, E&gt;</code> object views <code>T</code> as success value and <code>E</code> as failure value. You could construct a result by calling:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> success</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Ok</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// This creates a success value, aka `Ok(_)`.</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> failure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Err</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// This creates a failure value, aka `Err(_)`.</span></span></code></pre></div><p>For more information about the FP API, see <a href="https://embers-of-the-fire.github.io/result-js/" target="_blank" rel="noreferrer">the documentation</a>.</p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>This repository is licensed under the <a href="./LICENSE-MIT.html">MIT License</a> and the <a href="./LICENSE-APACHE.html">Apache License v2.0</a>.</p>',19),o=[n];function r(p,c,i,u,y,h){return a(),e("div",null,o)}const C=s(l,[["render",r]]);export{D as __pageData,C as default};
